
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Owais
 */
public class Dashboards_jframe extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    /**
     * Creates new form Dashboards_jframe
     */
    public Dashboards_jframe() {
        conn = javaconnect.ConnecrDb();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Education_Pie = new javax.swing.JButton();
        Education_Bar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Experience_Pie = new javax.swing.JButton();
        Experience_Bar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Total_Points_Pie = new javax.swing.JButton();
        Total_Points_Bar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        Experience_Pie1 = new javax.swing.JButton();
        Experience_Bar1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        Experience_Pie2 = new javax.swing.JButton();
        Experience_Bar2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        home_button = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Education", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setOpaque(false);

        Education_Pie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/pie_chart.png"))); // NOI18N
        Education_Pie.setOpaque(false);
        Education_Pie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Education_PieActionPerformed(evt);
            }
        });

        Education_Bar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/bar_chart.png"))); // NOI18N
        Education_Bar.setOpaque(false);
        Education_Bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Education_BarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Pie chart");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Bar chart");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Education_Pie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Education_Bar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Education_Pie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(Education_Bar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Experience", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setOpaque(false);

        Experience_Pie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/pie_chart.png"))); // NOI18N
        Experience_Pie.setOpaque(false);
        Experience_Pie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_PieActionPerformed(evt);
            }
        });

        Experience_Bar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/bar_chart.png"))); // NOI18N
        Experience_Bar.setOpaque(false);
        Experience_Bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_BarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pie chart");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Bar chart");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Experience_Pie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Experience_Bar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel6)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Experience_Pie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(1, 1, 1)
                .addComponent(Experience_Bar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel6))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total points", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setOpaque(false);

        Total_Points_Pie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/pie_chart.png"))); // NOI18N
        Total_Points_Pie.setOpaque(false);
        Total_Points_Pie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Total_Points_PieActionPerformed(evt);
            }
        });

        Total_Points_Bar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/bar_chart.png"))); // NOI18N
        Total_Points_Bar.setOpaque(false);
        Total_Points_Bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Total_Points_BarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pie chart");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Bar chart");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(Total_Points_Pie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(Total_Points_Bar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel5))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Total_Points_Pie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(Total_Points_Bar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel5))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profession", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setOpaque(false);

        Experience_Pie1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/pie_chart.png"))); // NOI18N
        Experience_Pie1.setOpaque(false);
        Experience_Pie1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_Pie1ActionPerformed(evt);
            }
        });

        Experience_Bar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/bar_chart.png"))); // NOI18N
        Experience_Bar1.setOpaque(false);
        Experience_Bar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_Bar1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pie chart");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Bar chart");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Experience_Pie1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(Experience_Bar1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel7))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel8)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Experience_Pie1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(1, 1, 1)
                .addComponent(Experience_Bar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel8))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gender", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel6.setOpaque(false);

        Experience_Pie2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/pie_chart.png"))); // NOI18N
        Experience_Pie2.setOpaque(false);
        Experience_Pie2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_Pie2ActionPerformed(evt);
            }
        });

        Experience_Bar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/bar_chart.png"))); // NOI18N
        Experience_Bar2.setOpaque(false);
        Experience_Bar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Experience_Bar2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Pie chart");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Bar chart");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(Experience_Pie2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(Experience_Bar2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel9))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel10)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Experience_Pie2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(1, 1, 1)
                .addComponent(Experience_Bar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel10))
        );

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Home");

        home_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/home_small.png"))); // NOI18N
        home_button.setOpaque(false);
        home_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home_buttonActionPerformed(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/homePage/icons/F14-wallpaper-remix-em-rev2-dark-nosupernova.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(960, 960, 960)
                .addComponent(home_button, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(980, 980, 980)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 1060, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addComponent(home_button)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel11))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Education_PieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Education_PieActionPerformed

        DefaultPieDataset pieDataset = new DefaultPieDataset();
        try //High school
        {
            String sql1 = "Select COUNT(Highest_degree_type) from applicants where Highest_degree_type = '1'";// WHERE Highest_degree_type = 1"; 
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountHS = rs.getString("COUNT(Highest_degree_type)");
            pieDataset.setValue("High School", new Integer(CountHS));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Diploma
        {
            String sql2 = "Select count(Highest_degree_type) from applicants where Highest_degree_type = '2'"; 
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountDP = rs.getString("COUNT(Highest_degree_type)");
            pieDataset.setValue("Diploma", new Integer(CountDP));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //BSC
        {
            String sql3 = "Select COUNT(Highest_degree_type) from applicants where Highest_degree_type = '3'"; 
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountBSC = rs.getString("COUNT(Highest_degree_type)");
            pieDataset.setValue("Bachelor", new Integer(CountBSC));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //MSC
        {
            String sql4 = "Select count(Highest_degree_type) from applicants WHERE Highest_degree_type = '4'"; 
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountMSC = rs.getString("COUNT(Highest_degree_type)");
            pieDataset.setValue("Masters", new Integer(CountMSC));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //PHD
        {
            String sql5 = "Select count(Highest_degree_type) from applicants WHERE Highest_degree_type = '5'"; 
            pst = conn.prepareStatement(sql5);
            rs = pst.executeQuery();
            String CountPHD = rs.getString("COUNT(Highest_degree_type)");
            pieDataset.setValue("Doctorate", new Integer(CountPHD));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
            PiePlot p = (PiePlot)chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart", chart);
            frame.setVisible(true);
            frame.setSize(500, 500);        
    }//GEN-LAST:event_Education_PieActionPerformed

    private void Education_BarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Education_BarActionPerformed

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try //High school
        {
            String sql1 = "Select COUNT(Highest_degree_type) from applicants where Highest_degree_type = '1'";// WHERE Highest_degree_type = 1"; 
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountHS = rs.getString("COUNT(Highest_degree_type)");
            dataset.setValue(new Integer(CountHS), "Applicants", "High school");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Diploma
        {
            String sql2 = "Select count(Highest_degree_type) from applicants where Highest_degree_type = '2'"; 
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountDP = rs.getString("COUNT(Highest_degree_type)");
            dataset.setValue(new Integer(CountDP), "Applicants", "Diploma");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //BSC
        {
            String sql3 = "Select COUNT(Highest_degree_type) from applicants where Highest_degree_type = '3'"; 
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountBSC = rs.getString("COUNT(Highest_degree_type)");
            dataset.setValue(new Integer(CountBSC), "Applicants", "Bachelors");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //MSC
        {
            String sql4 = "Select count(Highest_degree_type) from applicants WHERE Highest_degree_type = '4'"; 
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountMSC = rs.getString("COUNT(Highest_degree_type)");
            dataset.setValue(new Integer(CountMSC), "Applicants", "Masters");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //PHD
        {
            String sql5 = "Select count(Highest_degree_type) from applicants WHERE Highest_degree_type = '5'"; 
            pst = conn.prepareStatement(sql5);
            rs = pst.executeQuery();
            String CountPHD = rs.getString("COUNT(Highest_degree_type)");
            dataset.setValue(new Integer(CountPHD), "Applicants", "Doctorate");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        
        
        JFreeChart chart = ChartFactory.createBarChart("Qualification of Applicants", "Qualification", "Number of Applicants", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.GRAY);
       
        ChartFrame frame = new ChartFrame("Bar Chart for Applicant's qualification", chart);
        frame.setVisible(true);
        frame.setSize(500,350);
        
    }//GEN-LAST:event_Education_BarActionPerformed

    private void Experience_PieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_PieActionPerformed
                
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        try //0 to 4
        {
            String sql1 = "Select COUNT(ExYears) from applicants where ExYears >= '0' AND ExYears < '5'";// WHERE experience 0 to 4 years 
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String Count1 = rs.getString("COUNT(ExYears)");
            pieDataset.setValue("0 to 4 years", new Integer(Count1));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //5 to 9
        {
            String sql2 = "Select count(ExYears) from applicants where ExYears >= '5' AND ExYears < '10'"; // WHERE experience 5 to 9 years
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String Count2 = rs.getString("COUNT(ExYears)");
            pieDataset.setValue("5 to 9 years", new Integer(Count2));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //10 to 14
        {
            String sql3 = "Select COUNT(ExYears) from applicants where ExYears >= '10' AND ExYears < '15'"; // WHERE experience 10 to 14 years
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String Count3 = rs.getString("COUNT(ExYears)");
            pieDataset.setValue("10 to 14 years", new Integer(Count3));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //15 to steve
        {
            String sql4 = "Select count(ExYears) from applicants WHERE ExYears >= '15'"; // WHERE experience 15 to steve years
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String Count4 = rs.getString("COUNT(ExYears)");
            pieDataset.setValue("15 years or more", new Integer(Count4));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
            PiePlot p = (PiePlot)chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart", chart);
            frame.setVisible(true);
            frame.setSize(500, 500);                                       

    }//GEN-LAST:event_Experience_PieActionPerformed

    private void Experience_BarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_BarActionPerformed
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try //0 to 4
        {
            String sql1 = "Select COUNT(ExYears) from applicants where ExYears >= '0' AND ExYears < '5'";// // WHERE experience 0 to 4 years
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();            
            String Count1 = rs.getString("COUNT(ExYears)");
            dataset.setValue(new Integer(Count1), "Applicants", "0 to 4");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //5 to 9
        {
            String sql2 = "Select COUNT(ExYears) from applicants where ExYears >= '5' AND ExYears < '10'"; // WHERE experience 5 to 9 years
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String Count2 = rs.getString("COUNT(ExYears)");
            dataset.setValue(new Integer(Count2), "Applicants", "5 to 9");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //10 to 14
        {
            String sql3 = "Select COUNT(ExYears) from applicants where ExYears >= '10' AND ExYears < '15'"; // WHERE experience 10 to 14 years
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String Count3 = rs.getString("COUNT(ExYears)");
            dataset.setValue(new Integer(Count3), "Applicants", "10 to 14");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //15 to steve
        {
            String sql4 = "Select COUNT(ExYears) from applicants where ExYears >= '15'"; // WHERE experience 15 to steve years
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String Count4 = rs.getString("COUNT(ExYears)");
            dataset.setValue(new Integer(Count4), "Applicants", " >15 ");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
               
        
        JFreeChart chart = ChartFactory.createBarChart("Experience of Applicants", "Years", "Number of Applicants", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.GRAY);
       
        ChartFrame frame = new ChartFrame("Bar Chart for Applicant's Experience", chart);
        frame.setVisible(true);
        frame.setSize(500,350);

    }//GEN-LAST:event_Experience_BarActionPerformed

    private void Total_Points_PieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Total_Points_PieActionPerformed
        
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        try //0 to 19
        {
            String sql = "Select COUNT(Points) from applicants where Points >= '0' AND Points <'20'";// WHERE total points 0 to 19 
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            String CountFirst = rs.getString("COUNT(Points)");
            pieDataset.setValue("0-19", new Integer(CountFirst));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //20 to 39
        {
            String sql = "Select COUNT(Points) from applicants where Points >= '20' AND Points <'40'"; // WHERE total points 20 to 39
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            String CountSecond = rs.getString("COUNT(Points)");
            pieDataset.setValue("20-39", new Integer(CountSecond));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //40 to 59
        {
            String sql3 = "Select COUNT(Points) from applicants where Points >= '40' AND Points <'60'"; // WHERE total points 40 to 59
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountThird = rs.getString("COUNT(Points)");
            pieDataset.setValue("40-59", new Integer(CountThird));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //60 to 79
        {
            String sql4 = "Select COUNT(Points) from applicants where Points >= '60' AND Points <'80'"; // WHERE total points 60 to 79
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountFourth = rs.getString("COUNT(Points)");
            pieDataset.setValue("60-79", new Integer(CountFourth));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //80 to 100
        {
            String sql5 = "Select COUNT(Points) from applicants where Points >= '80' AND Points <='100'"; // WHERE total points 80 to 100
            pst = conn.prepareStatement(sql5);
            rs = pst.executeQuery();
            String CountFifth = rs.getString("COUNT(Points)");
            pieDataset.setValue("80-100", new Integer(CountFifth));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true , true);
            PiePlot p = (PiePlot)chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart", chart);
            frame.setVisible(true);
            frame.setSize(500, 500);                                       

    }//GEN-LAST:event_Total_Points_PieActionPerformed

    private void Total_Points_BarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Total_Points_BarActionPerformed

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try //0 to 19
        {
            String sql1 = "Select COUNT(Points) from applicants where Points >= '0' AND Points <'20'";// WHERE total points 0 to 19 
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();            
            String CountP1 = rs.getString("COUNT(Points)");
            dataset.setValue(new Integer(CountP1), "Applicants", "0 to 19");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //20 to 39
        {
            String sql2 = "Select COUNT(Points) from applicants where Points >= '20' AND Points <'40'"; // WHERE total points 20 to 39
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountP2 = rs.getString("COUNT(Points)");
            dataset.setValue(new Integer(CountP2), "Applicants", "20 to 39");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //40 to 59
        {
            String sql3 = "Select COUNT(Points) from applicants where Points >= '40' AND Points <'60'"; // WHERE total points 40 to 59
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountP3 = rs.getString("COUNT(Points)");
            dataset.setValue(new Integer(CountP3), "Applicants", "40 to 59");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //60 to 79
        {
            String sql4 = "Select COUNT(Points) from applicants where Points >= '60' AND Points <'80'"; // WHERE total points 60 to 79
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountP4 = rs.getString("COUNT(Points)");
            dataset.setValue(new Integer(CountP4), "Applicants", "60 to 79");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //80 to 100
        {
            String sql4 = "Select COUNT(Points) from applicants where Points >= '80' AND Points <='100'"; // WHERE total points 80 to 100
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountP5 = rs.getString("COUNT(Points)");
            dataset.setValue(new Integer(CountP5), "Applicants", "80 to 100");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }       
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        
        JFreeChart chart = ChartFactory.createBarChart("Total points of Applicants", "Points", "Number of Applicants", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.GRAY);
       
        ChartFrame frame = new ChartFrame("Bar Chart for Applicant's total points", chart);
        frame.setVisible(true);
        frame.setSize(500,350);

    }//GEN-LAST:event_Total_Points_BarActionPerformed

    private void Experience_Pie1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_Pie1ActionPerformed
        
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        try //Manager
        {
            String sql1 = "Select COUNT(Type) from applicants where Type = 'Manager'";// WHERE type of profile is Manager
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountM = rs.getString("COUNT(Type)");
            pieDataset.setValue("Manager", new Integer(CountM));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Engineer
        {
            String sql2 = "Select count(Type) from applicants where Type = 'Engineer'"; // WHERE type of profile is Engineer
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountE = rs.getString("COUNT(Type)");
            pieDataset.setValue("Engineer", new Integer(CountE));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Technician
        {
            String sql3 = "Select COUNT(Type) from applicants where Type = 'Technician'"; // WHERE type of profile is Techician
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountT = rs.getString("COUNT(Type)");
            pieDataset.setValue("Technician", new Integer(CountT));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Administrative
        {
            String sql4 = "Select count(Type) from applicants WHERE Type = 'Administrative'"; // WHERE type of profile is Administrative
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountA = rs.getString("COUNT(Type)");
            pieDataset.setValue("Administrative", new Integer(CountA));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
            PiePlot p = (PiePlot)chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart", chart);
            frame.setVisible(true);
            frame.setSize(500, 500);        

    }//GEN-LAST:event_Experience_Pie1ActionPerformed

    private void Experience_Bar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_Bar1ActionPerformed
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try //Manager
        {
            String sql1 = "Select COUNT(Type) from applicants where Type = 'Manager'";// WHERE Profile type is Manager 
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountM = rs.getString("COUNT(Type)");
            dataset.setValue(new Integer(CountM), "Applicants", "Manager");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Engineer
            
        {
            String sql2 = "Select count(Type) from applicants where Type = 'Engineer'"; // WHERE Profile type is Engineer 
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountE = rs.getString("COUNT(Type)");
            dataset.setValue(new Integer(CountE), "Applicants", "Engineer");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Technician
        {
            String sql3 = "Select COUNT(Type) from applicants where Type = 'Technician'"; // WHERE Profile type is Technician 
            pst = conn.prepareStatement(sql3);
            rs = pst.executeQuery();
            String CountT = rs.getString("COUNT(Type)");
            dataset.setValue(new Integer(CountT), "Applicants", "Technician");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Administrative
        {
            String sql4 = "Select count(Type) from applicants WHERE Type = 'Administrative'"; // WHERE Profile type is Administrative 
            pst = conn.prepareStatement(sql4);
            rs = pst.executeQuery();
            String CountA = rs.getString("COUNT(Type)");
            dataset.setValue(new Integer(CountA), "Applicants", "Administrative");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
                
        JFreeChart chart = ChartFactory.createBarChart("Profile type of Applicants", "Profession", "Number of Applicants", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.GRAY);
       
        ChartFrame frame = new ChartFrame("Bar Chart for Applicant's Profession", chart);
        frame.setVisible(true);
        frame.setSize(500,350);

    }//GEN-LAST:event_Experience_Bar1ActionPerformed

    private void Experience_Pie2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_Pie2ActionPerformed
                
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        try //Male
        {
            String sql1 = "Select COUNT(Gender) from applicants where Gender = 'M'";// WHERE Gender of applicant is Male
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountMale = rs.getString("COUNT(Gender)");
            pieDataset.setValue("Male", new Integer(CountMale));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Female
        {
            String sql2 = "Select count(Gender) from applicants where Gender = 'F'"; // WHERE Gender of applicant is Female
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountFe = rs.getString("COUNT(Gender)");
            pieDataset.setValue("Female", new Integer(CountFe));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        
            JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
            PiePlot p = (PiePlot)chart.getPlot();
            //p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame frame = new ChartFrame("Pie Chart", chart);
            frame.setVisible(true);
            frame.setSize(500, 500);        

    }//GEN-LAST:event_Experience_Pie2ActionPerformed

    private void Experience_Bar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Experience_Bar2ActionPerformed
                
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try //Male
        {
            String sql1 = "Select COUNT(Gender) from applicants where Gender = 'M'";// WHERE Gender of applicant is Male
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            String CountMale = rs.getString("COUNT(Gender)");
            dataset.setValue(new Integer(CountMale), "Applicants", "Male");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
        try //Engineer
        {
            String sql2 = "Select count(Gender) from applicants where Gender = 'F'"; // WHERE Gender of applicant is Female
            pst = conn.prepareStatement(sql2);
            rs = pst.executeQuery();
            String CountFe = rs.getString("COUNT(Gender)");
            dataset.setValue(new Integer(CountFe), "Applicants", "Female");
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
                      finally {
                    try{
                        rs.close(); pst.close(); }
                    catch(Exception e) { } }
                
        JFreeChart chart = ChartFactory.createBarChart("Gender of Applicants", "Gender", "Number of Applicants", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.GRAY);
       
        ChartFrame frame = new ChartFrame("Bar Chart for Applicant's Gender", chart);
        frame.setVisible(true);
        frame.setSize(500,350);

    }//GEN-LAST:event_Experience_Bar2ActionPerformed

    private void home_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home_buttonActionPerformed

        homePage s = new homePage();
        s.setVisible(true);
        close();
    }//GEN-LAST:event_home_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboards_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboards_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboards_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboards_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboards_jframe().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Education_Bar;
    private javax.swing.JButton Education_Pie;
    private javax.swing.JButton Experience_Bar;
    private javax.swing.JButton Experience_Bar1;
    private javax.swing.JButton Experience_Bar2;
    private javax.swing.JButton Experience_Pie;
    private javax.swing.JButton Experience_Pie1;
    private javax.swing.JButton Experience_Pie2;
    private javax.swing.JButton Total_Points_Bar;
    private javax.swing.JButton Total_Points_Pie;
    private javax.swing.JButton home_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables

    private void close() {
         WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }
}
